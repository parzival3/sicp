:PROPERTIES:
:header-args:racket: :tangle (concat (plist-get (plist-get (org-element-at-point) 'src-block) ':name) ".rkt")
:END:
#+TITLE: Chapter 2 SICP


* Exercise 1
#+NAME: 1
#+begin_src racket
  #lang racket
  (require "../SicpLibrary/sicp-library.rkt")

  (define (make-rat x y)
    (if (and (< x 0)
             (< y 0))
        (cons (abs x) (abs y))
        (cons x y)))
#+end_src



* Exercise 2
#+NAME: 2
#+begin_src racket
  #lang racket

  (require "../SicpLibrary/sicp-library.rkt")

  (define (make-point x y)
    (cons x y))

  (define (x-point p)
    (car p))

  (define (y-point p)
    (cdr p))

  (define (make-segment start end)
    (cons start end))

  (define (start-segment seg)
    (car seg))

  (define (end-segment seg)
    (cdr seg))

  (define (seg-y-size seg)
    (abs (- (y-point (start-segment seg))
            (y-point (end-segment seg)))))

  (define (seg-x-size seg)
    (abs (- (x-point (start-segment seg))
            (x-point (end-segment seg)))))

  (define (segment-length seg)
    (sqrt (+ (square (seg-x-size seg))
             (square (seg-y-size seg)))))

  (define (print-point p)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")"))

  ;;; This is not correct...
  ;;; Need to swap x-point and start-segment
  (define (midpoint-segment seg)
    (cons (average (x-point (start-segment seg))
                   (x-point (end-segment seg)))
          (average (y-point (start-segment seg))
                   (y-point (end-segment seg)))))

  (provide (all-defined-out))
#+end_src

* Exercise 3
#+NAME: 3
#+begin_src racket
  #lang racket
  (require "../SicpLibrary/sicp-library.rkt")
  (require "2.rkt")

  ;;; How can I represent a rectangle with cons?
  ;;; I think a rectangle is fully defined by two segments so I'll keep
  ;;; this representation and modify the constructor in order to make it
  ;;; easy to define different abstractions. Where the head is the base and the
  ;;; car is the heigth

  (define (make-rectangle-4p p1 p2 p3 p4)
    ;;; Make a rectangle by using points, the points are defined anti-clock wise
    ;;; from top left to top right
    (cons (make-segment p2 p3)   ;; base
          (make-segment p1 p2))) ;; height

  (define (rect-left-seg rect)
    (car rect))

  (define (rect-base-seg rect)
    (car rect))

  (define (height rect)
    (segment-length (rect-left-seg rect)))

  (define (base rect)
    (segment-length (rect-base-seg rect)))

  (define (rectangle-area rect)
    (* (base rect) (height rect)))

  (define (rectangle-perimeter rect)
    (+ (* (base rect)   2)
       (* (height rect) 2)))

  (define pa (make-point -1.0  1.0))
  (define pb (make-point -1.0 -1.0))
  (define pc (make-point  1.0 -1.0))
  (define pd (make-point  1.0  1.0))

  (define rect (make-rectangle-4p pa pb pc pd))

  (rectangle-area rect)
  (rectangle-perimeter rect)
#+end_src

* Exercise 4
#+NAME: 4
#+begin_src racket
  #lang racket

  (define (cons x y)
    (lambda (m) (m x y)))

  (define (car z)
    (z (lambda (p q) p)))

  (define (cdr z)
    (z (lambda (p q) q)))
#+end_src

* Exercise 5
#+NAME: 5
#+begin_src racket
  #lang racket

  (define (cons-ab a b)
    (* (expt 2 a)
       (expt 3 b)))


  (define (car-ab num)
    (define (car-impl x)
      (cond [(not (= 0 (remainder x 3))) (/ (log x) (log 2))]
            [else (car-impl (/ x 3))]))
    (car-impl num))

  (define (cdr-ab num)
    (define (cdr-impl x)
      (cond [(not (= 0 (remainder x 2))) (/ (log x) (log 3))]
            [else (cdr-impl (/ x 2))]))
    (cdr-impl num))
#+end_src

* Exercise 6
#+NAME: 6
#+begin_src racket
  #lang racket

  (define zero (lambda (f) (lambda (x) x)))

  (define (add-1 n)
    (lambda (f) (lambda (x) (f ((n f) x)))))

  (define one (lambda (f) (lambda (x) (f x))))
  (define two (lambda (f) (lambda (x) (f (f x)))))

  (define (plus a b)
    (lambda (f) (lambda (x) ((a f) ((b f) x)))))
#+end_src

* Exercise 7
#+NAME: 7
#+begin_src racket
  #lang racket

  (define (make-interval x y)
    (cons x y))

  (define (lower-bound int)
    (car int))

  (define (upper-bound int)
    (cdr int))

  (define (add-interval x y)
    (make-interval (+ (lower-bound x) (lower-bound y))
                   (+ (upper-bound x) (upper-bound y))))

  (define (mul-interval x y)
    (let ([p1 (* (lower-bound x) (lower-bound y))]
          [p2 (* (lower-bound x) (upper-bound y))]
          [p3 (* (upper-bound x) (lower-bound y))]
          [p4 (* (upper-bound x) (upper-bound y))])
      (make-interval (min p1 p2 p3 p4)
                     (max p1 p2 p3 p4))))


  (define (div-interval x y)
    (mul-interval
     x
     (make-interval (/ 1.0 (upper-bound y))
                    (/ 1.0 (lower-bound y)))))


  (provide (all-defined-out))
#+end_src

* Exercise 8
#+NAME: 8
#+begin_src racket
  #lang racket

  (require "7.rkt")

  (define (sub-interval x y)
    (make-interval (- (lower-bound x) (upper-bound y))
                   (- (upper-bound x) (lower-bound y))))
#+end_src

* Exercise 9
#+NAME: 9
#+begin_src racket
  #lang racket
  (require "7.rkt")

  (define (width int)
    (/ (- (upper-bound int) (lower-bound int)) 2))


  (define int-b (make-interval 10.10 10.20))
  (define int-a (make-interval 9.10 9.15))

  (= (+ (width int-b) (width int-a))
     (width (add-interval int-a int-b)))

  (not (= (+ (width int-b) (width int-a))
          (width (mul-interval int-a int-b))))
#+end_src

* Exercise 10
#+NAME: 10
#+begin_src racket  #lang racket
  (require "7.rkt")

  (define (div-interval x y)
    (define (unsafe-div x y)
      (mul-interval
       x
       (make-interval (/ 1.0 (upper-bound y))
                      (/ 1.0 (lower-bound y)))))
    (cond [(not (or (= (upper-boud y) 0)
                    (= (lower-bound y)0))) (unsafe-div x y)]
          [else (error "Can't devide by a zero width interval")]))
#+end_src

* Exercise 11
#+NAME: 11
#+begin_src racket
  #lang racket
#+end_src

* Exercise 12
#+NAME: 12
#+begin_src racket  #lang racket

  (require "7.rkt")

  (define (make-center-width c w)
    (make-interval (- c w) (+ c w)))

  (define (center i)
    (/ (+ (lower-bound i) (upper-bound i)) 2))

  (define (width i)
    (/ (- (upper-bound i) (lower-bound i)) 2))

  (define (make-center-percent c p)
    (let ([width (/ (* c p) 100)])
      (make-center-width c width)))

  (define (percent int)
    (/ (* (width int) 100) (center int)))
#+end_src

* TODO Exercise 13
#+NAME: 13
#+begin_src racket
#+end_src

* TODO Exercise 14
#+NAME: 14
#+begin_src racket
#+end_src
* TODO Exercise 15
#+NAME: 15
#+begin_src racket
#+end_src
* TODO Exercise 16
#+NAME: 16
#+begin_src racket
#+end_src


* Exercise 17
#+NAME: 17
#+begin_src racket
  #lang racket

  (define (last-pair l)
    (cond [(null? l) null]
          [(null? (caddr l)) (car l)]
          [else (last-pair (cdr l))]))
#+end_src

* Exercise 18
#+NAME: 18
#+begin_src racket
  #lang racket


  (define (m-reverse l)
    (define (m-reverse-impl l a)
      (if (null? l)
          a
          (m-reverse-impl (cdr l) (cons (car l) a))))
    (m-reverse-impl l null))
#+end_src

* Exercise 19
#+NAME: 19
#+begin_src racket
  #lang racket

  (require "../SicpLibrary/sicp-library.rkt")

  (define (no-more? coins-value)
    (null? coins-value))

  (define (except-first-denomination coins-value)
    (cdr conis-value))

  (define (first-denomination coins-value)
    (car coins-value))
#+end_src
* Exercise 20
#+NAME: 20
#+begin_src racket
  #lang racket
  (define (same-parity f . x)
    (define (filter-list l f a)
      (if (null? l)
          a
          (filter-list (cdr l) f (if (f (car l))
                                     (cons (car l) a)
                                     a))))
    (let ((function (if (even? f) even?
                        odd?)))
      (reverse (filter-list x function (list f)))))
#+end_src
